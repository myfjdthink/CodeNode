script.
  var Http = UTIL.Http;
  var app = angular.module('app', []);
  var propertys = !{JSON.stringify(propertys).replace(/<\//g, "<\\/")}
  console.log('propertys', propertys);
  // 设置 angular  的 filter, 为了能准确显示 select 框的值

  function selectFilter(propertys) {
    prefix = prefix || ''
    _.each(propertys, function (property) {
      if (property.inputType === 'select') {
        var optionMap = _.indexBy(property.options, 'value')
        console.log('selectFilter filter key', property.key);
        app.filter('filter_' + property.key, function ($sce) {
          return function (input) {
            return optionMap[input] ? optionMap[input].name : input
          }
        });
      } else if (property.array) {
        selectFilter(property.tem_propertys)
      }
    });
  }
  selectFilter(propertys)
  app.filter("break", function ($sce) {
    return function (value) {
      if (!angular.isString(value)) return value;
      return $sce.trustAsHtml(value.split("\n").join("<br/>"));
    };
  });

  app.controller('HEHEController', ['$scope', '$http', '$location', function ($scope, $http, $location) {
    $scope.models = [];
    $scope.model = {};
    $scope.isUpdate = false;
    $scope.modelName = '#{modelName}';
    var queryString = $location.search();
    console.log('queryString', queryString);
    $scope.limit = queryString['limit'];

    function getDefaultValue() {
      var defaultValue = {}
      for (var index in propertys) {
        var property = propertys[index]
        if (property.defaultsTo) {
          defaultValue[property.key] = property.defaultsTo
        } else if (property.array) {
          defaultValue[property.key] = [{}]
        }
      }
      console.log('getDefaultValue', defaultValue);
      return defaultValue
    }

    function init() {
      $scope.isUpdate = true
      var defaultValue = getDefaultValue()
      defaultValue.isUpdate = true
      $scope.model = defaultValue;
    }

    init()
    $scope.addModel = function () {
      $scope.models = [$scope.model].concat($scope.models)
    };

    $scope.editModel = function (e, ticketObj, k) {
      $scope.isUpdate = true
      ticketObj.isUpdate = !ticketObj.isUpdate
      $scope.model = ticketObj;
    };

    $scope.addArrayKey = function (e, key) {
      $scope.model.isUpdate = true
      if (!$scope.model[key]) $scope.model[key] = []
      $scope.model[key].push({})
    };

    $scope.removeArrayKey = function (e, ticketObj, key, index) {
      ticketObj[key].splice(index, 1)
      $scope.model = ticketObj;
    };

    $scope.updateModel = function (e, ticketObj, k) {
      $scope.saveModel(ticketObj)
      $scope.isUpdate = false
      $scope.model = null
    };

    $scope.cancelUpdateModel = function (e, ticketObj, k, shift) {
      ticketObj.isUpdate = false
      if (shift && !ticketObj.id) {
        $scope.models.shift()
      }
      $scope.isUpdate = false
      init()
    };

    $scope.deleteModel = function (e, model, k) {
      if (confirm('确定要删除吗？')) {
        console.log('确定要删除吗', model);
        deleteModeltData($(e.target), model);
      }
    };

    //TRUE DELETE
    function deleteModeltData(obj, model) {
      var param = {
        method: 'DELETE',
        url: "/#{modelName}/" + model.id

      };
      console.log('delete model', param);
      doHttp(param, function (result) {
        getModels($scope, $http);
        console.log('delete model result', result);
      })
    }

    $scope.saveModel = function (model) {
      var param = {
        method: 'POST',
        url: "/#{modelName}/"
      };
      if (model.id) {
        param = {
          method: 'PUT',
          url: "/#{modelName}/" + model.id

        };
      }
      param.data = model;
      //console.log('save model', param);
      doHttp(param, function (result) {
        if (result) {
          model = null
        }
        console.log('save model result', result);
        getModels();
      });
    };


    getModels()

    function getModels() {
      var url = '/#{modelName}'

      var query = {
        sort: '#{sort}',
        limit: '#{limit}',
      }
      //- query.popupate = '#{populate}';
      if ($scope.limit) {
        query.limit = $scope.limit;
      }

      var param = {
        method: 'GET',
        url: url,
        params: query
      };
      doHttp(param, function (result) {
        var dateKeys = []
        _.each(propertys, function (property) {
          if (property.inputType === 'date') {
            dateKeys.push(property.key)
          }
        })
        _.each(result, function (obj) {
          _.each(dateKeys, function (key) {
            var date = new Date(obj[key])
            //- date.setFullYear(date.getFullYear(), date.getMonth(), date.getDate());
            //- date.setHours(0, 0, 0, 0);
            obj[key] = date
          })
        })
        $scope.models = result;
      })
    }

    // 统一的发送请求入口
    function doHttp(param, cbf) {
      Http.httpFn($http, $scope, param, function (data, status, headers, config) {
        if (data) {
          NAVY.Alert('操作成功～');
          cbf(data);
        } else {
          NAVY.Alert('操作失败～' + data.msg, {type: 'error'});
          console.log(data);
        }
      }, function (data, status, headers, config) {
        NAVY.Alert("失败", {type: 'error'});
        console.log(JSON.stringify(data));
      });
    }
  }])
